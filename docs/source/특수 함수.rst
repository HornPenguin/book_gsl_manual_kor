.. index:: 특수 함수

**********************************
특수 함수 (Special Functions)
**********************************

이 단원에서는 GSL의 특수 함수들을 기술합니다. 
이 라이브러리는 Airy 함수, Bessel 함수, Clausen 함수, Coulomb 파동함수, 
커플링 계수, Dawson 함수 Debye 함수, Dilogarithms, 타원 적분, 자코비 타원적분, 
오류함수, 지수적 적분, 페르미-디렉 함수, Gamma 함수, Gegenbauer 함수, 
Hermite 다항식과 함수, Hypergeometric 함수, Larguerre 함수, Legendre 함수, 
Spherical Harmonics, Psi(Digamma)함수, Synchrotron 함수, Transport 함수, 
삼각함수, 제타 함수 등을 제공합니다. 

각각의 명령어는 수치적 오류와 함수의 값을 계산해서 반환합니다.

기술된 함수들은 각각 다른 헤더파일에 정의되어 있습니다.
예를 들어서 :code:`gsl_sf_airy.h` 나 :code:`gsl_sf_bessel.h` 로 각각 나뉘어져 있습니다. 
모두 포함시켜서 계산하려면, :code:`gsl_sf.h` 을 포함시키면 됩니다.


함수의 사용 (Usage)
====================

이 단원에 기술된 함수들은 두 가지 형태로 호출할 수 있습니다. 
하나는 함수의 값을 불러오는 호출입니다. 이는 주어진 인자에 대한 함수의 수치값을 반환합니다. 
다른 하나는 오류 관리를 위한 호출 형태입니다. 
이 호출은 함수 값과 함께 오류 값을 반환합니다. 
이 두 가지 호출 형태는 모두 동일한 코드에 접근합니다. 
즉, 오류 관리 호출에서 얻은 계산 값과 곧바로 계산 값을 받는 호출에서 얻은 계산 값은 정확히 동일합니다. 
적어도 동일한 과정을 거친 계산입니다(*).

함수 값을 불러오는 호출은 말 그대로 인자에 대해 값을 계산한 수치 값만을 반환합니다. 
이는 곧바로 수학 수식 표현에 사용할 수 있습니다. 
예를 들어서 다음의 함수 호출은 베셀 함수 :math:`J\_0 (x)` 의 값을 계산합니다.

.. code-block:: c

    double y = gsl_sf_bessel_J0(x);


이 방법은 오류 코드를 확인하거나 오차 값을 계산할 수 없습니다. 
이러한 정보를 얻기 위해서는 오류 관리 호출 형태로 대체해서 해당 정보를 저장할 변수를 인자에 하나 더 추가해야 합니다.

.. code-block:: c

    gsl_sf_result result;
    int status = gsl_sf_bessel_J0_e (x, &result);


이러한 오류 관리 함수는 :code:`_e` 접미사를 가지고 있습니다. 
반환 값은 오류의 조건을 나타냅니다. 대표적으로 오버플로우, 언더플로우 아니면 오차를 나타냅니다. 
만약, 오류가 없다면 오류 관리 함수는  :code:`GSL_SUCCESS` 값을 반환합니다.

gsl_sf_result 구조체 (The gsl_sf_result struct)
--------------------------------------------------

이러한 특수 함수들은 결과 값을 계산하는 과정에서 오차를 함께 계산합니다. 
따라서, 이러한 오차와 결과값을 함께 다룰 수 있는 구조체를 함께 제공합니다. 
이 구조체는 헤더파일 :code:`gsl_sf_result.h` 정의되어 있습니다.

이 구조체는 다음과 같이 함수 값과 오차 값으로 이루어져 있습니다.

.. c:type:: gsl_sf_result

  .. code-block:: c

    typedef struct
    {
      double val;
      double err;
    } gsl_sf_result;


  :data:`val` 는 함수의 값을 저장하고, :data:`err` 는 함수 값의 절대 오차를 나타냅니다.

몇몇 경우에, 오버플로우나 언더플로우가 함수에 의해 감지될 수 있습니다. 
그러한 경우에 크기를 나타내는 지수 값을 오차/값 쌍과 함께 반환할 수도 있습니다. 
이러한 방법은 내장된 변수의 동적 크기를 초과해서 결과를 나타낼 수 있는 장점이 있습니다. 
이를 위해 다음과 같이 함수 값, 오차, 그리고 지수 값을 포함하는 구조체를 사용합니다. 
실제 값은 :code:`result * 10^(e10)` 을 계산해야 합니다.


.. c:type:: gsl_sf_result_e10

  ::

    typedef struct
    {
      double val;
      double err;
      int    e10;
    } gsl_sf_result_e10;


모드 (Modes)
-------------------------

이 라이브러리의 특수 함수 구현체들의 제공 목적은 배정밀도를 가지는 특수 함수 값의 제공을 위함입니다. 
그러나 몇몇 특수 함수들의 경우, 배정밀도 수준의 정밀도를 얻기 위해서 매우 높은 항이 필요한 경우도 있습니다. 
이러한 경우에 :c:type:`gsl_mode_t` 자료형으로 정의된 :code:`mode` 인자를 이용해 요구 정밀도를 낮추어 연산 효율을 높일 수 있습니다. 
다음의 정밀도 값들이 :math:`mode` 인자에 들어갈 수 있습니다.

.. c:type:: gsl_mode_t

  .. c:macro:: GSL_PREC_DOUBLE

    배정밀도, 근사적으로 :math:`2 \cdot 10^{-16}`  의 상대 정확도를 가짐.

  .. c:macro:: GSL_PREC_SINGLE

    단정밀도, 근사적으로 :math:`1 \cdot 10^{-7}`  의 상대 정확도를 가짐.

  .. c:macro:: GSL_PREC_APPROX

    근사 값, 근사적으로 :math:`5 \cdot 10^{-4}`  의 상대 정확도를 가짐.


근사 상태는 가장 빠른 계산 시간을 보장하지만 가장 낮은 정확도를 가집니다.


에어리 함수와 도함수(Airy function & Derivative)
================================================
.. include:: 특수 함수-airy.inc

베셀 함수(Bessel function)
================================
.. include:: 특수 함수-bessel.inc

클라우센 함수 (Clausen Functions)
==================================
.. include:: 특수 함수-clausen.inc

쿨롱 함수 (Coulomb Functions)
==================================
.. include:: 특수 함수-coulomb.inc

상호작용 계수 (Coupling Coefficients)
==========================================
.. include:: 특수 함수-coupling.inc

도슨 함수 (Dawson Function)
================================
.. include:: 특수 함수-dawson.inc

디바이 함수 (Debye Functions)
================================
.. include:: 특수 함수-debye.inc

다이로그 함수 (Dilogarithm)
============================
.. include:: 특수 함수-dilog.inc

기초 연산 (Elementary Operations)
======================================
.. include:: 특수 함수-elementary.inc

타원 적분 (Elliptic Integrals)
===================================
.. include:: 특수 함수-ellint.inc

자코비 타원 적분 (Elliptic Functions (Jacobi))
==============================================
.. include:: 특수 함수-elljac.inc

오차 함수 (Error Functions)
================================
.. include:: 특수 함수-erf.inc

지수 함수 (Exponential Functions)
======================================
.. include:: 특수 함수-exp.inc

지수 적분 함수 (Exponential Integrals)
======================================
.. include:: 특수 함수-expint.inc

페르미 디렉 함수 (Fermi-Dirac Function)
=======================================
.. include:: 특수 함수-fermi-dirac.inc

감마와 베타 함수 (Gamma and Beta Functions)
=============================================
.. include:: 특수 함수-gamma.inc

구겐바우어 함수 (Gegenbauer Functions)
=========================================
.. include:: 특수 함수-gegenbauer.inc

에르미트 다항식과 함수 (Hermite Polynomials and Functions)
============================================================
.. include:: 특수 함수-hermite.inc

초기하 함수 (Hypergeometric Functions)
===============================================
.. include:: 특수 함수-hyperg.inc


라게르 함수 (Laguerre Functions)
=========================================
.. include:: 특수 함수-laguerre.inc

람베르트 W 함수 (Lambert W Functions)
==========================================
.. include:: 특수 함수-lambert.inc

르장드르 함수와 구면조화 함수 (Legendre Functions and Spherical Harmonics)
===============================================================================
.. include:: 특수 함수-legendre.inc

로그 함수 (Logarithm and Related Functions)
=============================================
.. include:: 특수 함수-log.inc

마티유 함수 (Mathieu Functions)
===============================
.. include:: 특수 함수-mathieu.inc

멱함수 (Power Function)
========================
.. include:: 특수 함수-pow-int.inc

프사이(디감마) 함수 (Psi (Digamma) Function)
==================================================
.. include:: 특수 함수-psi.inc

싱크트론 함수 (Synchrotron Functions)
=================================================
.. include:: 특수 함수-synchrotron.inc

운송 함수 (Transport Functions)
=================================
.. include:: 특수 함수-transport.inc

삼각 함수 (Trigonometric Functions)
=====================================
.. include:: 특수 함수-trig.inc

제타 함수 (Zeta Functions)
============================
.. include:: 특수 함수-zeta.inc


예제 (Examples)
========================

다음 예제는 오차 관리 형태의 특수 함수를 사용하는 방법을 보여줍니다. 
베셀 함수 :math:`J\_0 (5.0)` 을 사용했습니다.

.. code-block:: c

  #include <stdio.h>
  #include <gsl/gsl_errno.h>
  #include <gsl/gsl_sf_bessel.h>

  int
  main (void)
  {
    double *x* = 5.0;
    gsl_sf_result result;

    double expected = -0.17759677131433830434739701;

    int status = gsl_sf_bessel_J0_e (x, &result);

    printf ("status  = %s\n", gsl_strerror(status));
    printf ("J0(5.0) = %.18f\n"
            "      +/- % .18f\n",
            result.val, result.err);
    printf ("exact   = %.18f\n", expected);
    return status;
  }


다음은 프로그램의 출력 결과입니다.

.. code-block:: console

  status  = success
  J0(5.0) = -0.    177596771314338264
        +/-  0.    00000000000000019   3
  exact   = -0.    177596771314338292


다음 프로그램은 같은 함수(베셀 함수)로 똑같은 값(:math:`J\_0 (5.0)`)을 계산합니다. 
이 때, :math:`result.err` 반환 상태는 존재하지 않습니다.

.. code-block:: c

  #include <stdio.h>
  #include <gsl/   gsl_sf_bessel.h>

  int
  main (void)
  {
    double *x* = 5.0;
    double expected = -0.  177596771314338304347     39701;

    double y =     gsl_sf_bessel_J0 (x);

    printf ("J0(5.0) = %.  18f\n", y);
    printf ("exact   = %.  18f\n", expected);
    return 0;
  }


출력 결과는 다음과 같습니다.

.. code-block:: console

    J0(5.0) = -0.177596771314338264
    exact   = -0.177596771314338292


참고문헌과 추가자료
==============================

이 라이브러리는 다음 책의 규약을 따릅니다 [#AS]_ .

- Handbook of Mathematical Functions, edited by Abramowitz & Stegun, Dover, ISBN 0486612724.

다음 논문들은 특수 함수들을 계산하기 위한 알고리즘에 관한 내용입니다.

* Allan J. MacLeod, MISCFUN: A software package to compute uncommon
  special functions.  ACM Trans. Math. Soft., vol.: 22,
  1996, 288--301

* Bunck, B. F., A fast algorithm for evaluation of normalized Hermite
  functions, BIT Numer. Math, 49: 281-295, 2009.

* G.N. Watson, A Treatise on the Theory of Bessel Functions,
  2nd Edition (Cambridge University Press, 1944).

* G. Nemeth, Mathematical Approximations of Special Functions,
  Nova Science Publishers, ISBN 1-56072-052-2

* B.C. Carlson, Special Functions of Applied Mathematics (1977)

* N. M. Temme, Special Functions: An Introduction to the Classical
  Functions of Mathematical Physics (1996), ISBN 978-0471113133.

* W.J. Thompson, Atlas for Computing Mathematical Functions, John Wiley & Sons,
  New York (1997).

* Y.Y. Luke, Algorithms for the Computation of Mathematical Functions, Academic
  Press, New York (1977).

* S. A. Holmes and W. E. Featherstone, A unified approach to the Clenshaw
  summation and the recursive computation of very high degree and order
  normalised associated Legendre functions, Journal of Geodesy, 76,
  pg. 279-299, 2002.

.. rubric:: 각주

.. [#AS] 미국 표준 기술 연구소에서 Milton Abramowitz와 Irene Stegun이 편집한 수학적 문헌으로 수식, 그래프 및 수학표를 포함하는 수학 함수 핸드북입니다.(*)

